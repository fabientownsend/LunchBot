# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/dm-constraints/all/dm-constraints.rbi
#
# dm-constraints-1.2.0
module DataMapper
  extend DataMapper::Constraints::Migrations::SingletonMethods
end
module DataMapper::Constraints
end
module DataMapper::Constraints::Resource
  def before_destroy_hook; end
  def enforce_destroy_constraints; end
end
module DataMapper::Constraints::Migrations
end
module DataMapper::Constraints::Migrations::Model
  def auto_migrate_constraints_down(repository_name = nil); end
  def auto_migrate_constraints_up(repository_name = nil); end
end
module DataMapper::Constraints::Migrations::Relationship
  def auto_migrate_constraints_down(repository_name); end
  def auto_migrate_constraints_up(repository_name); end
end
module DataMapper::Constraints::Migrations::Relationship::ManyToOne
  def auto_migrate_constraints_down(repository_name); end
  def auto_migrate_constraints_up(repository_name); end
end
class DataMapper::Associations::Relationship
  include DataMapper::Constraints::Migrations::Relationship
end
class DataMapper::Associations::ManyToOne::Relationship < DataMapper::Associations::Relationship
  include DataMapper::Constraints::Migrations::Relationship::ManyToOne
end
module DataMapper::Constraints::Migrations::SingletonMethods
  def auto_migrate!(repository_name = nil); end
  def auto_migrate_constraints_down(repository_name = nil); end
  def auto_migrate_constraints_up(repository_name = nil); end
  def auto_migrate_down!(repository_name = nil); end
  def auto_migrate_up!(repository_name = nil); end
end
module DataMapper::Constraints::Relationship
end
module DataMapper::Constraints::Relationship::OneToMany
  def assert_valid_constraint; end
  def constraint; end
  def enforce_destroy_constraint(resource); end
  def initialize(*args); end
  def set_constraint; end
end
class DataMapper::Associations::OneToMany::Relationship < DataMapper::Associations::Relationship
  include DataMapper::Constraints::Relationship::OneToMany
end
module DataMapper::Constraints::Relationship::ManyToMany
  def assert_valid_constraint; end
  def one_to_many_options; end
end
class DataMapper::Associations::ManyToMany::Relationship < DataMapper::Associations::OneToMany::Relationship
  include DataMapper::Constraints::Relationship::ManyToMany
end
module DataMapper::Constraints::Adapters
end
module DataMapper::Constraints::Adapters::Extension
  def const_added(const_name); end
  def constraint_extensions(const_name); end
  def include_constraint_api(const_name); end
end
module DataMapper::Adapters
  extend DataMapper::Constraints::Adapters::Extension
end
module DataMapper::Constraints::Adapters::AbstractAdapter
  def constraint_exists?(*arg0); end
  def create_relationship_constraint(*arg0); end
  def destroy_relationship_constraint(*arg0); end
end
class DataMapper::Adapters::AbstractAdapter
  include DataMapper::Constraints::Adapters::AbstractAdapter
end
module DataMapper::Constraints::Adapters::DataObjectsAdapter
  def constraint_exists?(storage_name, constraint_name); end
  def create_relationship_constraint(relationship); end
  def destroy_relationship_constraint(relationship); end
  def valid_relationship_for_constraint?(relationship); end
  include DataMapper::Constraints::Adapters::DataObjectsAdapter::SQL
end
module DataMapper::Constraints::Adapters::DataObjectsAdapter::SQL
  def constraint_name(storage_name, relationship_name); end
  def create_constraints_statement(constraint_name, constraint_type, source_storage_name, source_keys, target_storage_name, target_keys); end
  def destroy_constraints_statement(storage_name, constraint_name); end
end
module DataMapper::Constraints::Adapters::PostgresAdapter
  include DataMapper::Constraints::Adapters::DataObjectsAdapter
end
module DataMapper::Constraints::Adapters::SqliteAdapter
  def constraint_exists?(*arg0); end
  def create_relationship_constraint(*arg0); end
  def destroy_relationship_constraint(*arg0); end
end
