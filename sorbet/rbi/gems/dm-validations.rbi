# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/dm-validations/all/dm-validations.rbi
#
# dm-validations-1.2.0
module DataMapper
end
module DataMapper::Validations
  def errors; end
  def save(context = nil); end
  def save_self(*arg0); end
  def self.included(model); end
  def update(attributes = nil, context = nil); end
  def valid?(context = nil); end
  def valid_for_default?; end
  def validatable?; end
  def validation_property_value(name); end
  include DataMapper::Validations::Context
end
class DataMapper::Validations::OrderedHash
  def <<(kv); end
  def ==(hsh2); end
  def [](k); end
  def []=(k, i = nil, v = nil); end
  def clear; end
  def delete(key); end
  def delete_if; end
  def dup; end
  def each; end
  def each_key; end
  def each_pair; end
  def each_value; end
  def empty?; end
  def fetch(k, *a, &b); end
  def first; end
  def has_key?(key); end
  def initialize(*args, &blk); end
  def insert(i, k, v); end
  def inspect; end
  def invert; end
  def key?(key); end
  def keys; end
  def last; end
  def length; end
  def merge!(hsh2); end
  def merge(hsh2); end
  def order; end
  def order_by(&block); end
  def order_by_key; end
  def order_by_value; end
  def pop; end
  def push(k, v); end
  def reject!(&block); end
  def reject(&block); end
  def reorder; end
  def replace(hsh2); end
  def reverse!; end
  def reverse; end
  def select; end
  def self.[](*args); end
  def self.alpha(*args, &block); end
  def self.auto(*args); end
  def self.new_by(*args, &blk); end
  def shift; end
  def size; end
  def store(a, b); end
  def to_a; end
  def to_h; end
  def to_hash; end
  def to_json; end
  def to_s; end
  def unshift(k, v); end
  def update(hsh2); end
  def values; end
  include Enumerable
end
class Object < BasicObject
  def try_call(*args); end
  def validatable?; end
end
class DataMapper::ValidationError < StandardError
end
class DataMapper::InvalidContextError < StandardError
end
class DataMapper::Validations::ValidationErrors
  def [](property_name); end
  def add(field_name, message); end
  def clear!; end
  def each; end
  def empty?; end
  def errors; end
  def full_messages; end
  def initialize(resource); end
  def method_missing(meth, *args, &block); end
  def on(field_name); end
  def resource; end
  def respond_to?(method); end
  def self.default_error_message(key, field, *values); end
  def self.default_error_messages=(default_error_messages); end
  include Enumerable
end
class DataMapper::Validations::ContextualValidators
  def [](*args, &block); end
  def add(validator_class, *attributes); end
  def assert_valid(context); end
  def attribute(name); end
  def attributes; end
  def clear!; end
  def context(name); end
  def contexts; end
  def current_context; end
  def each(*args, &block); end
  def empty?(*args, &block); end
  def execute(named_context, target); end
  def initialize(model = nil); end
  def load_validated_properties(resource, validators); end
  def normalize_options(options, defaults = nil); end
  def valid_context?(context); end
  extend Forwardable
  include Enumerable
end
class DataMapper::Property
  def self.auto_validation(value = nil); end
  def self.format(value = nil); end
  def self.message(value = nil); end
  def self.messages(value = nil); end
  def self.set(value = nil); end
  def self.validates(value = nil); end
end
module DataMapper::Validations::AutoValidations
  def auto_validations_disabled?; end
  def disable_auto_validations; end
  def disabled_auto_validations?; end
  def self.generate_for_property(property); end
  def self.infer_format_validation_for(property, options); end
  def self.infer_length_validation_for(property, options); end
  def self.infer_presence_validation_for(property, options); end
  def self.infer_type_validation_for(property, options); end
  def self.infer_uniqueness_validation_for(property, options); end
  def self.infer_within_validation_for(property, options); end
  def self.options_with_message(base_options, property, validator_name); end
  def self.skip_auto_validation_for?(property); end
  def self.skip_presence_validation?(property); end
  def without_auto_validations; end
end
module DataMapper::Validations::AutoValidations::ModelExtension
  def property(*arg0); end
end
module DataMapper::Validations::Context
  def default_validation_context; end
  def self.any?(&block); end
  def self.current; end
  def self.in_context(context); end
  def self.stack; end
end
class DataMapper::Validations::GenericValidator
  def ==(other); end
  def add_error(target, message, field_name = nil); end
  def call(target); end
  def evaluate_conditional_clause(target, clause); end
  def execute?(target); end
  def field_name; end
  def get_resource_property(resource, property_name); end
  def humanized_field_name; end
  def if_clause; end
  def if_clause=(arg0); end
  def initialize(field_name, options = nil); end
  def inspect; end
  def optional?(value); end
  def options; end
  def set_optional_by_default(default = nil); end
  def to_s; end
  def unless_clause; end
  def unless_clause=(arg0); end
end
class DataMapper::Validations::PresenceValidator < DataMapper::Validations::GenericValidator
  def boolean_type?(property); end
  def call(target); end
  def default_error(property); end
  def present?(value, property); end
end
module DataMapper::Validations::ValidatesPresence
  def validates_presence_of(*fields); end
  def validates_present(*args, &block); end
  extend DataMapper::Deprecate
end
class DataMapper::Validations::PrimitiveTypeValidator < DataMapper::Validations::GenericValidator
  def call(target); end
  def default_error(property); end
end
module DataMapper::Validations::ValidatesPrimitiveType
  def validates_is_primitive(*args, &block); end
  def validates_primitive_type_of(*fields); end
  extend DataMapper::Deprecate
end
class DataMapper::Validations::AbsenceValidator < DataMapper::Validations::GenericValidator
  def call(target); end
end
module DataMapper::Validations::ValidatesAbsence
  def validates_absence_of(*fields); end
  def validates_absent(*args, &block); end
  extend DataMapper::Deprecate
end
class DataMapper::Validations::ConfirmationValidator < DataMapper::Validations::GenericValidator
  def call(target); end
  def initialize(field_name, options = nil); end
  def valid?(target); end
end
module DataMapper::Validations::ValidatesConfirmation
  def validates_confirmation_of(*fields); end
  def validates_is_confirmed(*args, &block); end
  extend DataMapper::Deprecate
end
module DataMapper::Validations::Format
end
module DataMapper::Validations::Format::Email
  def self.included(base); end
end
module DataMapper::Validations::Format::Url
  def self.included(base); end
end
class DataMapper::Validations::UnknownValidationFormat < ArgumentError
end
class DataMapper::Validations::FormatValidator < DataMapper::Validations::GenericValidator
  def call(target); end
  def initialize(field_name, options = nil); end
  def valid?(target); end
  include DataMapper::Validations::Format::Email
  include DataMapper::Validations::Format::Url
end
module DataMapper::Validations::ValidatesFormat
  def validates_format(*args, &block); end
  def validates_format_of(*fields); end
  extend DataMapper::Deprecate
end
class DataMapper::Validations::LengthValidator < DataMapper::Validations::GenericValidator
  def call(target); end
  def error_message_for(value); end
  def initialize(field_name, options); end
  def validate_equals(length); end
  def validate_max(length); end
  def validate_min(length); end
  def validate_range(length); end
  def validation_method; end
  def value_length(value); end
end
module DataMapper::Validations::ValidatesLength
  def validates_length(*args, &block); end
  def validates_length_of(*fields); end
  extend DataMapper::Deprecate
end
class DataMapper::Validations::WithinValidator < DataMapper::Validations::GenericValidator
  def call(target); end
  def initialize(field_name, options = nil); end
end
module DataMapper::Validations::ValidatesWithin
  def validates_within(*fields); end
end
class DataMapper::Validations::NumericalityValidator < DataMapper::Validations::GenericValidator
  def add_errors(target, errors); end
  def call(target); end
  def integer_only?; end
  def validate_eq(value, errors); end
  def validate_gt(value, errors); end
  def validate_gte(value, errors); end
  def validate_integer(value, errors); end
  def validate_lt(value, errors); end
  def validate_lte(value, errors); end
  def validate_ne(value, errors); end
  def validate_numeric(value, errors); end
  def validate_with(validation_type, value, errors); end
  def validate_with_comparison(value, cmp, expected, error_message_name, errors, negated = nil); end
  def value_as_string(value); end
end
module DataMapper::Validations::ValidatesNumericality
  def validates_is_number(*args, &block); end
  def validates_numericality_of(*fields); end
  extend DataMapper::Deprecate
end
class DataMapper::Validations::MethodValidator < DataMapper::Validations::GenericValidator
  def ==(other); end
  def call(target); end
  def initialize(field_name, options = nil); end
end
module DataMapper::Validations::ValidatesWithMethod
  def validates_with_method(*fields); end
end
module DataMapper::Validations::ValidatesWithBlock
  def validates_with_block(*fields, &block); end
end
class DataMapper::Validations::UniquenessValidator < DataMapper::Validations::GenericValidator
  def call(target); end
  def initialize(field_name, options = nil); end
  def valid?(target); end
  include DataMapper::Assertions
end
module DataMapper::Validations::ValidatesUniqueness
  def validates_is_unique(*args, &block); end
  def validates_uniqueness_of(*fields); end
  extend DataMapper::Deprecate
end
class DataMapper::Validations::AcceptanceValidator < DataMapper::Validations::GenericValidator
  def allow_nil?(value); end
  def call(target); end
  def initialize(field_name, options = nil); end
  def valid?(target); end
end
module DataMapper::Validations::ValidatesAcceptance
  def validates_acceptance_of(*fields); end
  def validates_is_accepted(*args, &block); end
  extend DataMapper::Deprecate
end
module DataMapper::Validations::ClassMethods
  def create(attributes = nil, *args); end
  def inherited(base); end
  def self.create_context_instance_methods(model, context); end
  def validators; end
  include DataMapper::Validations::AutoValidations
  include DataMapper::Validations::ValidatesAbsence
  include DataMapper::Validations::ValidatesAcceptance
  include DataMapper::Validations::ValidatesConfirmation
  include DataMapper::Validations::ValidatesFormat
  include DataMapper::Validations::ValidatesLength
  include DataMapper::Validations::ValidatesNumericality
  include DataMapper::Validations::ValidatesPresence
  include DataMapper::Validations::ValidatesPrimitiveType
  include DataMapper::Validations::ValidatesUniqueness
  include DataMapper::Validations::ValidatesWithBlock
  include DataMapper::Validations::ValidatesWithMethod
  include DataMapper::Validations::ValidatesWithin
end
