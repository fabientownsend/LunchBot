# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/libhoney/all/libhoney.rbi
#
# libhoney-1.12.1
module Libhoney
end
class Libhoney::NullTransmissionClient
  def add(event); end
  def close(drain); end
end
class Class < Module
  def builder_attr_accessor(*args); end
  def builder_attr_reader(*args); end
  def builder_attr_writer(*args); end
end
class Libhoney::Client
  def add(data); end
  def add_dynamic_field(name, proc); end
  def add_field(name, val); end
  def api_host; end
  def api_host=(val); end
  def block_on_responses; end
  def block_on_send; end
  def builder(fields = nil, dyn_fields = nil); end
  def close(drain = nil); end
  def dataset; end
  def dataset=(val); end
  def event; end
  def initialize(writekey: nil, dataset: nil, sample_rate: nil, api_host: nil, user_agent_addition: nil, transmission: nil, block_on_send: nil, block_on_responses: nil, max_batch_size: nil, send_frequency: nil, max_concurrent_batches: nil, pending_work_capacity: nil); end
  def max_batch_size; end
  def max_concurrent_batches; end
  def pending_work_capacity; end
  def responses; end
  def sample_rate; end
  def sample_rate=(val); end
  def send_dropped_response(event, msg); end
  def send_event(event); end
  def send_frequency; end
  def send_now(data = nil); end
  def should_drop(sample_rate); end
  def writekey; end
  def writekey=(val); end
end
class Libhoney::LogTransmissionClient
  def add(event); end
  def close(_drain); end
  def initialize(output:, verbose: nil); end
end
class Libhoney::LogClient < Libhoney::Client
  def initialize(*args, output: nil, verbose: nil, **kwargs); end
end
class Libhoney::NullClient < Libhoney::Client
  def initialize(*args, **kwargs); end
end
class Libhoney::MockTransmissionClient
  def add(event); end
  def close(drain); end
  def events; end
  def initialize; end
  def reset; end
end
class Libhoney::TestClient < Libhoney::Client
  def events; end
  def initialize(*args, **kwargs); end
  def reset; end
end
class Libhoney::Event
  def add(newdata); end
  def add_field(name, val); end
  def api_host; end
  def api_host=(arg0); end
  def data; end
  def dataset; end
  def dataset=(arg0); end
  def initialize(libhoney, builder, fields = nil, dyn_fields = nil); end
  def metadata; end
  def metadata=(arg0); end
  def sample_rate; end
  def sample_rate=(arg0); end
  def send; end
  def send_presampled; end
  def timestamp; end
  def timestamp=(arg0); end
  def with_timer(name); end
  def writekey; end
  def writekey=(arg0); end
end
class Libhoney::Builder
  def add(data); end
  def add_dynamic_field(name, proc); end
  def add_field(name, val); end
  def api_host; end
  def api_host=(arg0); end
  def builder(fields = nil, dyn_fields = nil); end
  def dataset; end
  def dataset=(arg0); end
  def dyn_fields; end
  def dyn_fields=(arg0); end
  def event; end
  def fields; end
  def fields=(arg0); end
  def initialize(libhoney, parent_builder, fields = nil, dyn_fields = nil); end
  def sample_rate; end
  def sample_rate=(arg0); end
  def send_now(data = nil); end
  def writekey; end
  def writekey=(arg0); end
end
class Libhoney::Response
  def duration; end
  def duration=(arg0); end
  def error; end
  def error=(arg0); end
  def initialize(duration: nil, status_code: nil, metadata: nil, error: nil); end
  def metadata; end
  def metadata=(arg0); end
  def status_code; end
  def status_code=(arg0); end
end
class Libhoney::TransmissionClient
  def add(event); end
  def build_user_agent(user_agent_addition); end
  def close(drain); end
  def ensure_threads_running; end
  def initialize(max_batch_size: nil, send_frequency: nil, max_concurrent_batches: nil, pending_work_capacity: nil, send_timeout: nil, responses: nil, block_on_send: nil, block_on_responses: nil, user_agent_addition: nil); end
  def send_loop; end
end
