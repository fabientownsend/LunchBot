# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/dm-transactions/all/dm-transactions.rbi
#
# dm-transactions-1.2.0
module DataMapper
end
class DataMapper::Transaction
  def begin; end
  def begin?; end
  def begin_adapter(adapter); end
  def close_adapter(adapter); end
  def close_adapter_if_open(adapter); end
  def commit; end
  def commit?; end
  def commit_adapter(adapter); end
  def connect_adapter(adapter); end
  def do_adapter(adapter, what, prerequisite); end
  def each_adapter(method, on_fail); end
  def initialize(*things); end
  def link(*things); end
  def log_fatal_transaction_breakage(adapter); end
  def method_missing(method, *args, &block); end
  def none?; end
  def primitive_for(adapter); end
  def rollback; end
  def rollback?; end
  def rollback_adapter(adapter); end
  def rollback_and_close_adapter(adapter); end
  def self.include_transaction_api; end
  def state; end
  def state=(arg0); end
  def state_for(adapter); end
  def validate_primitive(primitive); end
  def within; end
  extend DataMapper::Chainable
end
module DataMapper::Transaction::Repository
  def transaction; end
end
module DataMapper::Transaction::Model
  def self.included(mod); end
  def transaction; end
end
module DataMapper::Transaction::Resource
  def transaction; end
end
module DataMapper::Adapters
  def self.include_transaction_api(const_name); end
  def self.transaction_extensions(const_name); end
  def self.transaction_module(const_name); end
  extend Anonymous_Module_6
end
module Anonymous_Module_6
  def const_added(const_name); end
end
class DataMapper::Repository
  include DataMapper::Transaction::Repository
end
module DataMapper::Model
  include DataMapper::Transaction::Model
end
module DataMapper::Resource
  include DataMapper::Transaction::Resource
end
module DataMapper::Transaction::DataObjectsAdapter
  def current_connection; end
  def current_transaction; end
  def pop_transaction; end
  def push_transaction(transaction); end
  def supports_savepoints?; end
  def transaction_primitive; end
  def transactions; end
  extend DataMapper::Chainable
  include Anonymous_Module_7
end
module Anonymous_Module_7
  def close_connection(connection); end
  def open_connection; end
end
module DataMapper::Transaction::PostgresAdapter
  def supports_savepoints?; end
  include DataMapper::Transaction::DataObjectsAdapter
end
module DataMapper::Transaction::SqliteAdapter
  include DataMapper::Transaction::DataObjectsAdapter
end
