# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/logglier/all/logglier.rbi
#
# logglier-0.2.13
module Logglier
  def self.new(url, opts = nil); end
end
module Logglier::Client
  def self.new(input_url, opts = nil); end
end
class Logglier::Client::HTTP
  def close; end
  def deliverer; end
  def initialize(opts = nil); end
  def input_uri; end
  def write(message); end
  include Logglier::Client::InstanceMethods
end
class Logglier::Client::HTTP::NetHTTPProxy
  def connect!; end
  def deliver(message); end
  def failsafe; end
  def failsafe=(arg0); end
  def failsafe_errored(exception, message); end
  def failsafe_message(exception, message); end
  def failsafe_retrying(exception, message, retries); end
  def initialize(input_uri, opts = nil); end
end
class Logglier::Client::HTTP::DeliveryThreadManager
  def deliver(message); end
  def initialize(input_uri, opts = nil); end
  def start_thread; end
end
class Logglier::Client::HTTP::DeliveryThread < Thread
  def deliver(message); end
  def exit!; end
  def initialize(input_uri, opts = nil); end
end
class Logglier::Client::Syslog
  def close; end
  def datetime_format; end
  def facility; end
  def formatter; end
  def initialize(opts = nil); end
  def input_uri; end
  def pri(severity); end
  def syslog; end
  def write(message); end
  include Logglier::Client::InstanceMethods
end
module Logglier::Client::InstanceMethods
  def formatter; end
  def masher(hash, prefix = nil); end
  def masherize_key(prefix, key); end
  def massage_message(incoming_message, severity); end
  def setup_input_uri(opts); end
end
class Logglier::InputURLRequired < ArgumentError
end
class Logglier::UnsupportedScheme < ArgumentError
end
class Logglier::UnknownFacility < ArgumentError
end
